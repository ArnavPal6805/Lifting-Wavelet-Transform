% Read data from Excel
filename = 'Data_August_Renewable.xlsx';
data = readtable(filename, 'Sheet', 'Original data+Coeff', 'VariableNamingRule', 'preserve');
speed = data.Speed(:)'; % Convert to row vector

% Perform 3-level LWT decomposition
[cd3, cd2, cd1, ca3] = lwtcoeff(speed);

% Get height of original table
N = height(data);

% Pad or truncate coefficients to match the original data length
padToN = @(x) [x(:); nan(N - numel(x), 1)];

% Create a new table with original data and coefficients
coeffTable = table(data.Speed, padToN(ca3), padToN(cd3), padToN(cd2), padToN(cd1), ...
    'VariableNames', {'Speed', 'a3', 'd3', 'd2', 'd1'});

% Write the new table to a new sheet in the same Excel file
writetable(coeffTable, filename, 'Sheet', 'LWT Coefficients');

% ---------- Function to perform LWT and extract coefficients ----------
function [cd3, cd2, cd1, ca3] = lwtcoeff(data)
    % Define lifting scheme
    lscheme = liftingScheme("Wavelet", "haar");

    % Perform 3-level lifting wavelet decomposition
    [ca, cd] = lwt(data, "LiftingScheme", lscheme, "Level", 3);

    % Extract approximation coefficient at level 3
    ca3 = lwtcoef(ca, cd, ...
        "LiftingScheme", lscheme, ...
        "Level", 3, ...
        "OutputType", "coefficients", ...
        "Type", "approximation");

    % Extract detail coefficients at levels 1, 2, and 3
    cd1 = lwtcoef(ca, cd, ...
        "LiftingScheme", lscheme, ...
        "Level", 1, ...
        "OutputType", "coefficients", ...
        "Type", "detail");

    cd2 = lwtcoef(ca, cd, ...
        "LiftingScheme", lscheme, ...
        "Level", 2, ...
        "OutputType", "coefficients", ...
        "Type", "detail");

    cd3 = lwtcoef(ca, cd, ...
        "LiftingScheme", lscheme, ...
        "Level", 3, ...
        "OutputType", "coefficients", ...
        "Type", "detail");
end